name: Version Bump

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to bump'
        required: true
        type: choice
        options:
          - backend
          - frontend
      bump_type:
        description: 'Bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Bump Python package version (__version__)
        if: inputs.package == 'backend'
        shell: bash
        run: |
          cd packages/backend
          CURRENT=$(python - <<'PY'
from pathlib import Path
import re
p = Path('src/boards/__init__.py').read_text()
m = re.search(r"__version__\s*=\s*\"([^\"]+)\"", p)
print(m.group(1))
PY
)
          python - <<PY
import os
cur = os.environ['CURRENT']
parts = cur.split('.')
bt = os.environ['BUMP_TYPE']
if bt == 'major':
    parts[0] = str(int(parts[0]) + 1); parts[1] = '0'; parts[2] = '0'
elif bt == 'minor':
    parts[1] = str(int(parts[1]) + 1); parts[2] = '0'
else:
    parts[2] = str(int(parts[2]) + 1)
print('.'.join(parts))
PY
          NEW_VERSION=$(python - <<'PY'
import os
cur = os.environ['CURRENT']
parts = cur.split('.')
bt = os.environ.get('BUMP_TYPE', 'patch')
if bt == 'major':
    parts[0] = str(int(parts[0]) + 1); parts[1] = '0'; parts[2] = '0'
elif bt == 'minor':
    parts[1] = str(int(parts[1]) + 1); parts[2] = '0'
else:
    parts[2] = str(int(parts[2]) + 1)
print('.'.join(parts))
PY
)
          sed -i "" -e "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/boards/__init__.py || sed -i -e "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/boards/__init__.py
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        env:
          BUMP_TYPE: ${{ inputs.bump_type }}

      - name: Bump npm package version (pnpm)
        if: inputs.package == 'frontend'
        run: |
          cd packages/frontend
          pnpm version ${{ inputs.bump_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and tag
        run: |
          git add .
          git commit -m "chore: bump ${{ inputs.package }} to ${{ env.NEW_VERSION }}"
          git tag "${{ inputs.package }}@${{ env.NEW_VERSION }}"
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ inputs.package }}@${{ env.NEW_VERSION }}"
          release_name: "${{ inputs.package }} v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false


