name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty for auto-detection)'
        required: false
        type: string
      bump_type:
        description: 'Type of version bump'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      bump_type: ${{ steps.version.outputs.bump_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and bump type
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=tagged" >> $GITHUB_OUTPUT
            echo "Using version from tag: $VERSION"
          elif [ "${{ inputs.version }}" != "" ]; then
            # Use manually specified version
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "bump_type=${{ inputs.bump_type }}" >> $GITHUB_OUTPUT
            echo "Using manual version: ${{ inputs.version }}"
          else
            # Auto-detect version bump from commits
            git log --oneline $(git describe --tags --abbrev=0)..HEAD > recent_commits.txt || echo "No previous tags" > recent_commits.txt
            
            if grep -qE "(BREAKING|breaking|feat!|fix!)" recent_commits.txt; then
              BUMP_TYPE="major"
            elif grep -qE "feat:" recent_commits.txt; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
            
            # Get current version from frontend package.json
            CURRENT_VERSION=$(node -p "require('./packages/frontend/package.json').version")
            
            # Calculate new version
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            case $BUMP_TYPE in
              major)
                NEW_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="$major.$((minor + 1)).0"
                ;;
              patch)
                NEW_VERSION="$major.$minor.$((patch + 1))"
                ;;
            esac
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Auto-detected version: $NEW_VERSION (bump: $BUMP_TYPE)"
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: determine-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          pnpm install
          cd packages/backend && uv sync

      - name: Build packages
        run: |
          pnpm turbo build
          cd packages/backend && uv build

      - name: Run tests
        run: |
          pnpm turbo test
          cd packages/backend && uv run pytest --tb=short

      - name: Run linters
        run: |
          pnpm turbo lint typecheck
          cd packages/backend && uv run ruff check && uv run pyright

  update-versions:
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-test]
    outputs:
      version: ${{ needs.determine-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Update package versions
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          
          # Update frontend package.json
          cd packages/frontend
          pnpm version $VERSION --no-git-tag-version
          cd ../..
          
          # Update backend pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" packages/backend/pyproject.toml
          
          echo "Updated packages to version: $VERSION"

      - name: Commit version updates
        if: needs.determine-version.outputs.bump_type != 'tagged'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/frontend/package.json packages/backend/pyproject.toml
          git commit -m "chore: bump version to ${{ needs.determine-version.outputs.version }}"
          git push

  publish-npm:
    runs-on: ubuntu-latest
    needs: [determine-version, update-versions]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies and build
        run: |
          pnpm install
          pnpm turbo build

      - name: Update version (if needed)
        run: |
          if [ "${{ needs.determine-version.outputs.bump_type }}" = "tagged" ]; then
            cd packages/frontend
            pnpm version ${{ needs.determine-version.outputs.version }} --no-git-tag-version
          else
            git pull origin ${{ github.ref_name }} || true
          fi

      - name: Publish to npm
        run: |
          cd packages/frontend
          pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [determine-version, update-versions]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Update version (if needed)
        run: |
          if [ "${{ needs.determine-version.outputs.bump_type }}" = "tagged" ]; then
            sed -i "s/version = \".*\"/version = \"${{ needs.determine-version.outputs.version }}\"/" packages/backend/pyproject.toml
          else
            git pull origin ${{ github.ref_name }} || true
          fi

      - name: Build package
        run: |
          cd packages/backend
          uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packages/backend/dist/
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    needs: [determine-version, publish-npm, publish-pypi]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            COMMITS=$(git log --oneline ${PREV_TAG}..HEAD)
            echo "## Changes since ${PREV_TAG}" > changelog.md
          else
            COMMITS=$(git log --oneline)
            echo "## Initial Release" > changelog.md
          fi
          
          echo "" >> changelog.md
          echo "$COMMITS" | while IFS= read -r commit; do
            echo "- $commit" >> changelog.md
          done
          
          echo "## Packages Released" >> changelog.md
          echo "- \`@weirdfingers/boards\` v${VERSION} - [npm](https://www.npmjs.com/package/@weirdfingers/boards/v/${VERSION})" >> changelog.md
          echo "- \`boards-backend\` v${VERSION} - [PyPI](https://pypi.org/project/boards-backend/${VERSION}/)" >> changelog.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine-version.outputs.version }}
          release_name: Release v${{ needs.determine-version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false

      - name: Create tag (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag v${{ needs.determine-version.outputs.version }}
          git push origin v${{ needs.determine-version.outputs.version }}