name: Release

on:
  release:
    types: [published]

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Extract version from tag
        id: extract
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  release-python:
    needs: extract-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Update version in src/boards/__init__.py safely
        run: |
          python3 scripts/update_version.py "${{ needs.extract-version.outputs.version }}" --package backend
      - name: Build package
        run: |
          cd packages/backend
          uv build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd packages/backend
          uv publish

  release-npm:
    needs: extract-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"
      - name: Update version
        run: |
          cd packages/frontend
          pnpm version ${{ needs.extract-version.outputs.version }} --no-git-tag-version
      - name: Install dependencies
        run: pnpm install
      - name: Build package
        run: |
          cd packages/frontend
          pnpm build
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/frontend
          pnpm publish --access public
